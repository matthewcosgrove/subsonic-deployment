- type: replace
  path: /instance_groups/name=jumpbox/jobs/-
  value:
    name: pre-start-script
    release: os-conf
    properties:
      script: |-
          #!/bin/bash
          set -e
          chmod 1777 /tmp # https://github.com/cloudfoundry/bosh-linux-stemcell-builder/issues/39
          # bosh cli injected args
          UBUNTU_USER_HOME_DIR="((jumpbox_home))"
          SUBSONIC_SERVER_DOMAIN="((subsonic_domain))"
          SUBSONIC_JVM_START_UP_ARGS="((subsonic_args))"
          SUBSONIC_LETS_ENCRYPT_EMAIL="((subsonic_lets_encrypt_email))"
          SUBSONIC_SOLO_DROPBOX_FOLDER="((subsonic_solo_dropbox_folder))"
          # start ubuntu script - agnostic of bosh cli usage
          : "${UBUNTU_USER_HOME_DIR:? UBUNTU_USER_HOME_DIR must be set}"
          : "${SUBSONIC_SERVER_DOMAIN:? SUBSONIC_SERVER_DOMAIN must be set to the DNS being used to refer to this instance which should be configured in nginx e.g. music.mydomain.com }"
          : "${SUBSONIC_JVM_START_UP_ARGS:? SUBSONIC_JVM_START_UP_ARGS must be set to override the defaults in /etc/default/subsonic}"
          : "${SUBSONIC_SOLO_DROPBOX_FOLDER:? SUBSONIC_SOLO_DROPBOX_FOLDER must be set to the only folder which wont get excluded}"

          echo "Started" > /tmp/progress.txt
          apt-get -qq update
          apt -yqq install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
          add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          apt-get -qq update
          apt -yqq install docker-ce
          echo "Docker installed" >> /tmp/progress.txt

          cat << 'EOF' > $UBUNTU_USER_HOME_DIR/.bash_aliases
          alias dropbox="docker exec -it dropbox gosu dropbox dropbox"
          alias run="docker run --detach --name=dropbox --restart=always -e DROPBOX_UID=$(id -u) -e DROPBOX_GID=$(id -g) -v "/var/vcap/store/home/jumpbox/.dropbox:/opt/dropbox/.dropbox" -v "/var/vcap/store/home/jumpbox/Dropbox:/opt/dropbox/Dropbox" otherguy/dropbox:latest"
          alias logs="docker logs --follow dropbox"
          EOF
          echo "Bash aliases configured" >> /tmp/progress.txt
          
          cat << EOF > $UBUNTU_USER_HOME_DIR/.env
          export DROPBOX_FOLDER_TO_KEEP=$SUBSONIC_SOLO_DROPBOX_FOLDER
          EOF
          echo "Bash exports configured" >> /tmp/progress.txt

          cat << 'EOF' > $UBUNTU_USER_HOME_DIR/.functions
          function exclusion(){
            pushd ~/Dropbox > /dev/null;
            shopt -s nullglob; array=(*/); shopt -u nullglob; # https://stackoverflow.com/a/18887210
            popd > /dev/null
            if (( ${#array[@]} == 0 )); then
              echo "No subdirectories found. Something went wrong so check the dropbox sync!" >&2
              return 1
            fi
            source ~/.env
            echo "Keeping only sub-directory $DROPBOX_FOLDER_TO_KEEP"
            delete=($DROPBOX_FOLDER_TO_KEEP/)
            for target in "${delete[@]}"; do
              for i in "${!array[@]}"; do
                if [[ ${array[i]} = $target ]]; then
                  unset 'array[i]'
                fi
              done
            done
            dropbox_cmd="docker exec -i dropbox gosu dropbox dropbox"
            if (( ${#array[@]} != 0 )); then
              echo "Sub-directories to be excluded: $array"
              $dropbox_cmd exclude add "${array[@]}"
            else
              echo "No further directories need excluding"
            fi
            $dropbox_cmd exclude
          }
          EOF
          echo "Bash functions configured" >> /tmp/progress.txt

          usermod -aG docker jumpbox

          systemctl stop docker
          mkdir -p /var/vcap/store/docker
          cat <<EOF > /etc/docker/daemon.json
            {
               "graph": "/var/vcap/store/docker"
            }
          EOF

          systemctl start docker

          echo "Docker configured" >> /tmp/progress.txt

          # https://www.linuxbabe.com/ubuntu/install-subsonic-media-server-ubuntu-18-04-https
          apt -yqq install openjdk-8-jre
          subsonic_version=6.1.5
          wget -O subsonic.deb https://s3-eu-west-1.amazonaws.com/subsonic-public/download/subsonic-${subsonic_version}.deb
          dpkg -i subsonic.deb
          # change default root user, and do so idempotently
          sed -i '/SUBSONIC_USER/ s/=.*$/=jumpbox/' /etc/default/subsonic
          subsonic_jvm_start_up_args_with_ampersand_escaped_for_sed=${SUBSONIC_JVM_START_UP_ARGS//&/\\&} # https://stackoverflow.com/a/44375021/752167
          # as values contain / use different sed delimeter #
          sed -i '/^SUBSONIC_ARGS/ s#=.*$#="'"$subsonic_jvm_start_up_args_with_ampersand_escaped_for_sed"'"#' /etc/default/subsonic
          systemctl restart subsonic
          echo "Subsonic installed" >> /tmp/progress.txt

          # Either enable IPv6 or change the nginx configuration issue --> https://serverfault.com/a/828014
          # Means we know the nginx install will fail so install and swallow failure
          apt -yqq install nginx || true # https://stackoverflow.com/a/11231970/752167
          sed -i '/:80 /s/^/#/' /etc/nginx/sites-enabled/default
          systemctl restart nginx || true
          systemctl start nginx || true
          # ubuntu 16.04 bug --> https://bugs.launchpad.net/ubuntu/+source/nginx/+bug/1581864
          # also see https://stackoverflow.com/a/42084804/752167
          mkdir /etc/systemd/system/nginx.service.d
          printf "[Service]\nExecStartPost=/bin/sleep 0.1\n" > /etc/systemd/system/nginx.service.d/override.conf
          systemctl daemon-reload
          systemctl restart nginx
          # check with 'netstat -plunt | grep nginx'
          echo "Nginx installed" >> /tmp/progress.txt

          # 'EOF' vs EOF with escaping --> https://stackoverflow.com/a/25903579/752167 and https://unix.stackexchange.com/a/405254/308152
          cat <<EOF >/etc/nginx/conf.d/subsonic-proxy.conf
          server {
                  listen 80;
                  server_name $SUBSONIC_SERVER_DOMAIN;

                  location / {
                          proxy_pass http://127.0.0.1:4040;
                          proxy_set_header Host \$http_host;
                          proxy_set_header X-Real-IP \$remote_addr;
                          proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                          proxy_set_header X-Forwarded-Proto \$scheme;
                  }
          }
          EOF
          systemctl reload nginx
          echo "Nginx configured" >> /tmp/progress.txt

          apt install -yqq software-properties-common
          add-apt-repository -y ppa:certbot/certbot
          apt update
          apt install -yqq certbot python3-certbot-nginx
          # IMPORTANT: Below may be commented out due to rate limiting. TODO: Switch to staging to testing purposes
          certbot -n --nginx --agree-tos --redirect --hsts --staple-ocsp --email $SUBSONIC_LETS_ENCRYPT_EMAIL --domain $SUBSONIC_SERVER_DOMAIN
          echo "Lets Encrypt configured via certbot" >> /tmp/progress.txt

          # Ensure that the settings page works etc. Full insight here https://sourceforge.net/p/subsonic/bugs/179/
          sed -i '/proxy_set_header X-Forwarded-Proto/ a '"proxy_redirect http:// https://;"'' /etc/nginx/conf.d/subsonic-proxy.conf
          systemctl reload nginx

          # dropbox exclusions service
          cat <<EOF > /usr/bin/systemctl_dropbox_exclusions.sh
          #!/bin/bash
          source ~/.functions; exclusion
          EOF
          chmod +x /usr/bin/systemctl_dropbox_exclusions.sh
          # create systemd timer
          cat <<EOF > /etc/systemd/system/subsonic-dropbox-exclusions.timer
          [Unit]
          Description=Runs subsonic dropbox-exclusions fixer every xx
          [Timer]
          # Time to wait after booting before we run first time
          OnBootSec=1min
          # Time between running each consecutive time
          OnUnitActiveSec=1min
          Unit=subsonic-dropbox-exclusions.service
          EOF
          # create systemd service
          cat <<EOF > /etc/systemd/system/subsonic-dropbox-exclusions.service
          [Unit]
          Description=Subsonic dropbox-exclusions
          [Service]
          Type=oneshot
          ExecStart=/bin/bash /usr/bin/systemctl_dropbox_exclusions.sh
          User=jumpbox
          EOF
          systemctl daemon-reload
          systemctl start subsonic-dropbox-exclusions.timer
